1/list ka cube
cube([],[]).
cube([X | Xs], [Y | Ys]) :-Y is X * X * X,cube(Xs, Ys).

Q-cube([1,2,2,3],A).
A = [1, 8, 8, 27]

/2/list ka sqare
square([],[]).
square([X | Xs], [Y | Ys]) :-Y is X * X ,square(Xs, Ys).

Q-square([1,2,2,3],A).
A = [1, 4, 4, 9]

/3/sqrt of list 
sqrt_list([],[]).
sqrt_list([X|Xs],[Y|Ys]):-Y is sqrt(X),sqrt_list(Xs, Ys).

Q-sqrt_list([1,4,9,16,25],SqrtList).


/4/sqare of even nos in list//similarly for odd//similarly for cube
square_even([X | Xs], [Y | Ys]) :-
    0 is X mod 2,  
    Y is X * X,    
    square_even(Xs, Ys).
square_even([X | Xs], Ys) :-
    1 is X mod 2,
    square_even(Xs, Ys).


Q-square_even([1, 2, 3, 4, 5, 6], SquaredEvenList).


/5/sqrt of even nos.//similarly for odd//similarly for cube
square_even([X | Xs], [Y | Ys]) :-
    0 is X mod 2,  
    Y is sqrt(X),    
    square_even(Xs, Ys).
square_even([X | Xs], Ys) :-
    1 is X mod 2,
    square_even(Xs, Ys).


/6/profit perct
calculate_profit_perct(CostPrice, SellingPrice, ProfitPerct) :-
    var(ProfitPerct),
    ProfitPerct is ((SellingPrice - CostPrice) / CostPrice) * 100.

Q-calculate_profit_perct(225, 250, P).

/7/profit//same for loss
calculate_profit(CostPrice, SellingPrice, Profit) :-
    var(Profit),
    Profit is SellingPrice - CostPrice.

Q-calculate_profit(225, 250, P).

/8/loss perct
calculate_loss_percentage(SellingPrice, CostPrice, LossPercentage) :-
    LossPercentage is ((CostPrice - SellingPrice) / CostPrice) * 100.

Q-calculate_loss_percentage(80, 100, LossPercentage).

/9/
calculate_cost_price_from_profit(SellingPrice, Profit, CostPrice) :-
    CostPrice is SellingPrice / (1 + Profit / 100).

Q-calculate_cost_price_from_profit(120, 20, CostPrice).

/10/
calculate_selling_price_from_profit(CostPrice, Profit, SellingPrice) :-
    SellingPrice is CostPrice + (CostPrice * Profit / 100).

/11/
calculate_selling_price_from_loss(CostPrice, Loss, SellingPrice) :-
    SellingPrice is CostPrice / (1 - Loss / 100).

/12/
calculate_cost_price_from_loss(SellingPrice, Loss, CostPrice) :-
    CostPrice is SellingPrice / (1 - Loss / 100).

/13/squaring +ve elements//similar for neg//similar for cubing//similar for sqrt
square_positive_elements([], []).
square_positive_elements([X | Xs], [Y | Ys]) :-
    X > 0,
    Y is X * X,
    square_positive_elements(Xs, Ys).
square_positive_elements([X | Xs], Ys) :-
    X =< 0,
    square_positive_elements(Xs, Ys).

/14/length of list 
list_length([], 0).
list_length([H|Tail],Length) :-
    list_length(Tail,N1),
    Length is N1 + 1.

/15/member check
member([H|_],X).
member([_|T]):-member([T],X).

member([1,2,3,4,5,2,-8,4],3).
true

/16/concanate lists.

concatenate_lists([],[], List).
concatenate_lists([], List, List).
concatenate_lists([X|Xs], List2, [X|Result]) :-
    concatenate_lists(Xs, List2, Result).


concatenate_lists([1,2],[2,3], List).


/17/append at front
add_to_front(Element, List, Result) :-
    Result = [Element | List].

/18/

reverse_list([], []).

reverse_list([Head|Tail], Reversed) :-
    reverse_list(Tail, PartialReversed),
    add_to_end(PartialReversed, Head, Reversed).

add_to_end([],Element,[Element]).
add_to_end([Head | Tail], Element, [Head | NewTail]) :-
    add_to_end(Tail, Element, NewTail).

reverse_list([1,2,3],A).

using append fn
reverse_list([], []).

reverse_list([Head | Tail], Reversed) :-
    reverse_list(Tail, ReversedTail),
    append(ReversedTail, [Head], Reversed).

/19/
fact(0,1).
fact(N,F):-X is N-1,fact(X,Y),F is N*Y.

/20/
fibonacci(N, Result) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fibonacci(N1, F1),
    fibonacci(N2, F2),
    Result is F1 + F2.

/21/NCR
factorial(0, 1).
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.

nCr(N, R, Result) :-
    factorial(N, FN),
    factorial(R, FR),
    NR is N - R,
    factorial(NR, FNR),
    Result is FN / (FR * FNR).

/22/NPR
factorial(0, 1).
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.

nPr(N, R, Result) :-
    NR is N - R,
    factorial(N, FN),
    factorial(NR, FNR),
    Result is FN / FNR.